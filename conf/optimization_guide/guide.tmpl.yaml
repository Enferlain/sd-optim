# sd-optim Optimization Guide Template
# This file tells the optimizer WHAT to optimize and HOW.
# It defines which parameters of a merge method are applied to which parts of the model.

# --- [Optional] Custom Block Configuration ---
# If you are using custom-defined blocks (e.g., grouping UNET layers in a non-standard way),
# specify the identifier of your custom block .yaml file here. This file must be in your 'configs_dir'.
# The optimizer will use this config for any component listed below that is defined within it.
# For any other component, it will fall back to the base model's standard key structure.
# custom_block_config_id: "sdxl-optim_blocks"

# --- Component & Strategy Definitions ---
# This is the core of the guide. It's a list where each item defines the strategy for a model component.
# A component MUST match a name in either your custom_block_config or the base model config (e.g., 'diffuser', 'clip_l').
components:
  # --- Example 1: Detailed 'diffuser' (UNET) strategy using multiple groups ---
  - name: diffuser
    # You can specify which merge method parameters this component's strategies should apply to.
    # This is useful if your merge method has multiple optimizable parameters (e.g., alpha, rank, constraint).
    optimize_params: [alpha, rank_ratio]
    strategies:
      # You can have multiple strategies per component. The optimizer will process them in order.
      # It's crucial that a single model key (or block) is not assigned to more than one parameter.
      
      # Strategy A: Use 'group' to apply shared parameters to specific sets of layers.
      - type: group
        # Optional: Override the component-level optimize_params for just this strategy.
        # optimize_params: [alpha]
        groups:
          - name: unet_early_in # A descriptive name for this group of blocks/keys.
            keys:
              # Use wildcards to select multiple blocks or keys.
              - "UNET_IN00" # A specific block name from your custom block config.
              - "UNET_IN0[1-3]" # A pattern that matches UNET_IN01, UNET_IN02, UNET_IN03.
              # - "*.input_blocks.0.*" # You can also target raw keys if not using blocks.
          - name: unet_mid
            keys: ["UNET_MID00"]
            
      # Strategy B: Use 'select' to optimize individual layers with their own unique parameters.
      - type: select
        keys:
          - "*.output_blocks.8.*" # Target a specific key pattern from the base model config.
        # By default, this will create a unique 'alpha' and 'rank_ratio' for each matching key.

  # --- Example 2: Simple 'clip_l' strategy using 'all' ---
  - name: clip_l
    # 'all' is the simplest strategy. It creates a unique, optimizable parameter
    # for every single block/key within this component.
    # Use with caution, as this can create hundreds of parameters!
    strategies:
      - type: all
        optimize_params: [alpha] # Only optimize 'alpha' for every block in clip_l.

  # --- Example 3: Mixed strategy for 'clip_g' ---
  - name: clip_g
    strategies:
      # Strategy A: Apply a single, shared 'alpha' value to all embedding-related keys.
      - type: single
        optimize_params: [alpha]
        # We can target raw keys even if a custom block config exists.
        target_type: key
        keys:
          - "*.embedding.*" # A wildcard pattern for keys.
          # Note: The 'single' strategy also needs a 'keys' list to know what to apply the single param to.

      # Strategy B: Don't optimize the rest of the clip_g layers at all.
      - type: none # 'none' is a special strategy that does nothing. Useful for excluding parts of a component.

  # --- Example 4: Do not optimize the 'vae' component at all ---
  - name: vae
    strategies:
      - type: none

# --- [Optional] Custom Parameter Bounds ---
# This section allows you to override the default bounds for any parameter generated by the strategies above.
# The parameter name is constructed as:
# - For 'select' or 'all': {key_or_block_name}_{param_name} (e.g., UNET_IN04_alpha)
# - For 'group' or 'single': {group_name}_{param_name} (e.g., unet_early_in_alpha)
custom_bounds:
  # --- Override bounds for a specific parameter generated by a 'select' or 'all' strategy ---
  # "UNET_IN05_alpha": [0.1, 0.5] # Constrain the alpha for this specific block.

  # --- Override bounds for a parameter shared by a 'group' or 'single' strategy ---
  # "unet_mid_alpha": [0.4, 0.6] # Constrain the alpha for the middle block group.

  # --- Override bounds for ALL parameters with a certain base name (e.g., 'rank_ratio') ---
  # This is a powerful global override.
  # rank_ratio: [0.05, 0.5] # Constrain all rank_ratio parameters, regardless of block/group.

  # --- Set a FIXED value for a parameter (it will no longer be optimized) ---
  # This is useful for turning off optimization for a specific part.
  # "UNET_OUT08_alpha": 0.0 # Force this block's alpha to always be 0.0.

  # --- Define CATEGORICAL options for a parameter ---
  # The optimizer will choose one of these specific values instead of a continuous range.
  # "some_group_lora_dim": [8, 16, 32, 64]

  # --- Define BINARY options (0 or 1) ---
  # This is useful for boolean flags in a merge method.
  # "unet_mid_early_exit": [0, 1]